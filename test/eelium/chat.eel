/////////////////////////////////////////////
// chat.eel - Graphical Chat Toy
// Copyright 2005, 2009, 2017 David Olofson
/////////////////////////////////////////////

eelversion 0.3.7;

import SDL as SDL;
import NET2 as NET2;
import io;

function Pen(renderer, color)
{
	return {
		// Private stuff
		.lastx		0,
		.lasty		0,
		.drawing	false,
		.renderer	renderer,

		// Interface
		.color		color,		// Pen color

		// Pen down
		procedure Down(self)
		{
			self.drawing = true;
		}

		// Move or draw
		procedure To(self, x, y)
		{
			if not self.drawing
			{
				self.(lastx, lasty) = x, y;
				return;
			}
			SDL.SetRenderDrawColor(self.(renderer, color));
			SDL.RenderDrawLine(self.(renderer, lastx, lasty),
					x, y);
			self.(lastx, lasty) = x, y;
		}

		// Pen up
		procedure Up(self)
		{
			self.drawing = false;
		}
	};
}

export function main<args>
{
	if specified args[1]
		local host = args[1];
	else
		host = "localhost";
	if specified args[2]
		local port = (integer)args[2];
	else
		port = 6666;

	// Try to connect to a server. Whether or not that
	// succeeds, also try to set up a server socket,
	// so we can accept new connections after our peer
	// disconnects.
	local peer, local server = nil;
	try
		peer = NET2.Socket [host, port];
	try
		server = NET2.TCPAcceptOn(port);

	local window = SDL.Window ["Graphical Chat",
			SDL.WINDOWPOS_CENTERED, SDL.WINDOWPOS_CENTERED,
			640, 480];
	local renderer = SDL.Renderer [window];

	local localpen = Pen(renderer, 0xffff00);
	local remotepen = Pen(renderer, 0x00ffff);

	local buf = memfile [];

	procedure handle(data)
	{
		upvalue remotepen;
		upvalue buf.position = sizeof buf;
		write(buf, data);
		buf.position = 0;
		try while true
		decodeloop:
		{
			switch read(buf, 1)[0]
			  case 'D'
				remotepen:Down();
			  case 'U'
				remotepen:Up();
			  case 'T'
			  {
				if sizeof buf < (2 * 4 + 1)
				{
					buf.position -= 1;
					break decodeloop;
				}
				local x = read(buf, integer);
				local y = read(buf, integer);
				remotepen:To(x, y);
			  }
			  default
				throw "Received corrupt data!";
		}
		delete(buf.buffer, 0, buf.position);
	}

	while true
	mainloop:
	{
		local ev = SDL.PollEvent();
		if not ev
		{
			SDL.RenderPresent(renderer);
			ev = SDL.WaitEvent();
		}
		switch ev.type
		  case SDL.MOUSEBUTTONDOWN
		  {
			localpen:Down();
			if peer
				NET2.TCPSend(peer, "D");
		  }
		  case SDL.MOUSEMOTION
		  {
			localpen:To(ev.(x, y));
			if peer
			{
				local bb = memfile [];
				write(bb, "T", (integer)ev.x, (integer)ev.y);
				NET2.TCPSend(peer, bb.buffer);
			}
		  }
		  case SDL.MOUSEBUTTONUP
		  {
			localpen:Up();
			if peer
				NET2.TCPSend(peer, "U");
		  }
		  case NET2.TCPACCEPTEVENT
		  {
			// We only want one client!
			if peer
				NET2.TCPClose(ev.socket);
			else
				peer = ev.socket;
		  }
		  case NET2.TCPRECEIVEEVENT
		  {
			while true
			{
				local d = NET2.TCPRead(ev.socket);
				if d == nil
					break;
				handle(d);
			}
		  }
		  case NET2.TCPCLOSEEVENT
		  {
			if ev.socket == peer
				peer = nil;
			NET2.TCPClose(ev.socket);
			// In case we were talking to a local server,
			// try to become a server when we're left alone.
			if not server
				try
					server = NET2.TCPAcceptOn(port);
		  }
		  case NET2.ERROREVENT
			print("NET2 error: ", ev.error, "\n");
		  case SDL.KEYUP
			if ev.sym == SDL.KESCAPE
				break mainloop;
		  case SDL.QUIT
			break mainloop;
	}
	return 0;
}
