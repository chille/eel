/////////////////////////////////////////////
// draw2.eel - Eelium Drawing Toy 2
// Copyright 2005, 2011, 2017 David Olofson
/////////////////////////////////////////////
//
// Using a texture as an offscreen buffer.
//
// Note that this requires a renderer with
// render target support to work!
//
/////////////////////////////////////////////

import SDL as SDL, math;

constant FILTERCOEFF = .1;

function Pen(renderer, canvas, color)
{
	local o = {
		// Private stuff
		.lastx		0,
		.lasty		0,
		.drawing	false,
		.renderer	renderer,
		.canvas		canvas,

		// Interface
		.color		color,		// Pen color

		// Pen down
		procedure Down(self)
		{
			self.drawing = true;
		}

		// Move or draw
		procedure To(self, x, y)
		{
			local r = self.renderer;
			if self.drawing
			{
				// Draw some on the texture
				SDL.SetRenderTarget(r, self.canvas);
				SDL.SetRenderDrawColor(r, self.color);
				SDL.RenderDrawLine(r,
						self.(lastx, lasty), x, y);
				SDL.RenderPresent(r);
				SDL.SetRenderTarget(r);

				// Copy modified area to window
				local dirty = SDL.Rect [
					(x, y) |< self.(lastx, lasty),
					(abs(x - self.lastx),
					abs(y - self.lasty)) + 1
				];
				SDL.RenderCopy(r, self.canvas, dirty, dirty);
			}
			self.(lastx, lasty) = x, y;
		}

		// Pen up
		procedure Up(self)
		{
			self.drawing = false;
		}
	};
	return o;
}

export function main<args>
{
	local window = SDL.Window ["Eelium Drawing Toy 2",
			SDL.WINDOWPOS_CENTERED, SDL.WINDOWPOS_CENTERED,
			640, 480];
	local renderer = SDL.Renderer [window];
	local canvas = SDL.Texture [renderer, SDL.PIXELFORMAT_RGB888,
			SDL.TEXTUREACCESS_TARGET, renderer.(w, h)];

	local pen = Pen(renderer, canvas, 0xffff00);

	// Clear the canvas texture
	SDL.SetRenderTarget(renderer, canvas);
	SDL.SetRenderDrawColor(renderer, 0x000000);
	SDL.RenderClear(renderer);
	SDL.RenderPresent(renderer);
	SDL.SetRenderTarget(renderer);

	local fx, local fy = nil;
	while true
	mainloop:
	{
		local ev = SDL.PollEvent();
		if not ev
		{
			SDL.RenderPresent(renderer);
			ev = SDL.WaitEvent();
		}
		switch ev.type
		  case SDL.KEYUP
			if ev.sym == SDL.KESCAPE
				break mainloop;
		  case SDL.QUIT
			break mainloop;
		  case SDL.WINDOWEVENT
		  {
			switch ev.event
			  case SDL.WINDOWEVENT_EXPOSED
				SDL.RenderCopy(renderer, canvas);
		  }
		  case SDL.MOUSEBUTTONDOWN
		  {
			fx, fy = ev.(x, y);
			pen:To((integer)(fx, fy));
			pen:Down();
		  }
		  case SDL.MOUSEMOTION
		  {
			if fx == nil
				fx, fy = ev.(x, y);
			else
				fx, fy += (ev.(x, y) - (fx, fy)) * FILTERCOEFF;
			pen:To((integer)(fx, fy));
		  }
		  case SDL.MOUSEBUTTONUP
		  {
			fx, fy = ev.(x, y);
			pen:To((integer)(fx, fy));
			pen:Up();
		  }
	}
	return 0;
}
