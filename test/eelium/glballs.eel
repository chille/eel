///////////////////////////////////////////////
// glballs.eel - Eelium Balls - OpenGL version
// Copyright 2010, 2014, 2017 David Olofson
///////////////////////////////////////////////

import SDL as SDL;
import OpenGL as gl;
import math;
import ball as ball;


procedure resize(w, h)
{
	gl.Viewport(0, 0, w, h);

	gl.MatrixMode(gl.PROJECTION);
	gl.LoadIdentity();
	if w > h
		local ow, local oh = w / h, 1;
	else
		ow, oh = 1, h / w;
	gl.Frustum(-ow, ow, -oh, oh, 1, 10);

	gl.MatrixMode(gl.MODELVIEW);
	gl.LoadIdentity();
}


export function main<args>
{
	local nballs = 200;
	local flags = SDL.WINDOW_OPENGL | SDL.WINDOW_RESIZABLE;

	gl.Load();
	gl.Exceptions(true);

	local window = SDL.Window ["Eelium OpenGL Balls",
			SDL.WINDOWPOS_CENTERED, SDL.WINDOWPOS_CENTERED,
			640, 480,
			flags];

	local glcontext = SDL.GLContext [window];

	SDL.GL_SetAttribute(gl.DOUBLEBUFFER, true);
	SDL.GL_SetSwapInterval(1);

	// Generate sprite graphics
	local tex = gl.UploadTexture(ball.render(64));
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

	gl.ShadeModel(gl.SMOOTH);
	gl.ClearColor(0, 0, 0, 0);
	gl.Disable(gl.DEPTH_TEST);
	gl.Disable(gl.CULL_FACE);
	gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);

	resize(window.(w, h));

	// Main loop
	local start, local lt, local t0 = SDL.GetTicks();
	local frames = 0;
	while true
	mainloop:
	{
		local t = SDL.GetTicks() - start;

		// Handle events
		while true
		{
			local ev = SDL.PollEvent();
			if not ev
				break;
			switch ev.type
			  case SDL.KEYUP
				if ev.sym == SDL.KESCAPE
					break mainloop;
			  case SDL.MOUSEBUTTONUP, SDL.QUIT
				break mainloop;
			  case SDL.WINDOWEVENT
			  {
				switch ev.event
				  case SDL.WINDOWEVENT_RESIZED
					resize(window.(w, h));
			  }
		}

		// Clear screen
		gl.Clear(gl.COLOR_BUFFER_BIT);

		// Render sprites
		local stx, local sty, local stz = t / (1000, 1400, 400);
		if window.w > window.h
			local sx, local sy = window.w / window.h, 1;
		else
			sx, sy = 1, window.h / window.w;
		gl.LoadIdentity();
		gl.Translate(0, 0, -3.1);
		gl.Scale(1, 1, 2);
		gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		gl.Enable(gl.BLEND);
		gl.Enable(gl.TEXTURE_2D);
		gl.BindTexture(gl.TEXTURE_2D, tex);
		gl.Begin(gl.QUADS);
		for local i = 0, nballs - 1
		{
			stx, sty, stz += .07, .09, .15;
			local x = sx * cos(stx);
			local y = sy * sin(sty);
			local z = sin(stz);
			local c = .45 * z + .55;
			gl.Color(c, c, c);
			gl.TexCoord(0, 1);
			gl.Vertex(x - .1, y - .1,  z);
			gl.TexCoord(1, 1);
			gl.Vertex(x + .1, y - .1,  z);
			gl.TexCoord(1, 0);
			gl.Vertex(x + .1, y + .1,  z);
			gl.TexCoord(0, 0);
			gl.Vertex(x - .1, y + .1,  z);
		}
		gl.End();

		// Make changes visible
		SDL.GL_SwapWindow(window);

		// Frame rate calculation
		frames += 1;
		local tn = SDL.GetTicks();
		local dt = .001 * (tn - lt);
		lt = tn;
		if(tn - t0 >= 5000)
		{
			dt = (tn - t0) / 1000.;
			print(frames, " frames in ", dt, " s ==> ", frames / dt,
					" fps\n");
			t0 = tn;
			frames = 0;
		}

		// ...in case we don't have retrace sync
		SDL.Delay(0);
	}
	return 0;
}
