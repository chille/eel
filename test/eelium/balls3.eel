//////////////////////////////////////////////////
// balls3.eel - Zooming, rotating SDL 2D Balls
// Copyright 2017 David Olofson
//////////////////////////////////////////////////

eelversion 0.3.7;

import SDL, math, "ball" as ball;

constant BALLSIZE = 40;
constant NBALLS = 200;

export function main<args>
{
	local window = Window ["Balls III",
			WINDOWPOS_CENTERED, WINDOWPOS_CENTERED,
			640, 480, WINDOW_RESIZABLE];
	local renderer = Renderer [window];
	ShowCursor(0);

	// Generate sprite graphics
	local sprite = Texture [renderer, ball.render(BALLSIZE)];

	// Main loop
	local start = GetTicks();
	local xc, local yc = window.(w, h) / 2;
	local xa, local ya = (xc, yc) - (BALLSIZE / 2);
	local dr = Rect[];
	while true
	mainloop:
	{
		local t = GetTicks() - start;

		// Handle events
		while true
		{
			local ev = PollEvent();
			if not ev
				break;
			switch ev.type
			  case KEYUP
				if ev.sym == KESCAPE
					break mainloop;
			  case MOUSEBUTTONUP, QUIT
				break mainloop;
			  case WINDOWEVENT
			  {
				switch ev.event
				  case WINDOWEVENT_RESIZED
				  {
					xc, yc = window.(w, h) / 2;
					xa, ya = (xc, yc) - (BALLSIZE / 2);
				  }
			  }
		}

		// Clear window
		SetRenderDrawColor(renderer, 0, 0, 0);
		RenderClear(renderer);

		// Render sprites
		local stx, local sty, local stz, local str =
				t / (1000, 1400, 400, 10);
		for local i = 0, NBALLS - 1
		{
			stx, sty, stz += .07, .09, .15;
			dr.x = cos(stx) * xa + xc - (BALLSIZE / 2);
			dr.y = sin(sty) * ya + yc - (BALLSIZE / 2);
			dr.(w, h) = .4 * sin(stz) + .6 * BALLSIZE;
			RenderCopy(renderer, sprite, nil, dr, str);
		}

		// Make changes visible
		RenderPresent(renderer);

		// ...in case we don't have retrace sync
		Delay(0);
	}
	return 0;
}
