////////////////////////////////////////////////////////
// bars.eel - SDL "Copper Bars"
// Copyright 2005, 2007, 2010, 2014, 2017 David Olofson
////////////////////////////////////////////////////////
// This example also demonstrates how to put
// an imported module (SDL, in this case) in
// it's own namespace. This can be handy if
// there are conflicts between modules, or to
// have the code explicitly show where things
// belong.
//    Note that the import namespace applies
// to *everything* imported from the module;
// not just functions.
////////////////////////////////////////////////////////

import SDL as SDL, math;

function new_gradient(height)
{
	local gr = [];
	gr[height - 1] = 0;
	return gr;
}

procedure clear(gr)
{
	for local y = 0, sizeof gr - 1
		gr[y] = 0x000000;
}

function bar(r, g, b, h)
{
	local gr = new_gradient(h);
	for local y = 0, h - 1
	{
		local s = sin(sin(PI * y / h)) * 200 + 55;
		gr[y] = ((integer)(r * s) << 16) |
				((integer)(g * s) << 8) |
				(integer)(b * s);
	}
	return gr;
}

procedure draw(src, dst, y)
{
	for local yy = 0, sizeof src - 1
		dst[yy + y] = src[yy];
}

procedure render(renderer, gr)
{
	local r = SDL.Rect[0, 0, renderer.w, 1];
	for local y = 0, sizeof gr - 1
	{
		r.y = y;
		SDL.SetRenderDrawColor(renderer, gr[y]);
		SDL.RenderFillRect(renderer, r);
	}
}

export function main<args>
{
	local window = SDL.Window ["SDL Copper Bars",
			SDL.WINDOWPOS_CENTERED, SDL.WINDOWPOS_CENTERED,
			320, 240];
	local renderer = SDL.Renderer [window];
	SDL.ShowCursor(0);

	local buffer = new_gradient(window.h);

	local barh = 32;
	local bars = [];
	for local i = 0, 20
		bars[i] = bar((i % 8) / 7,
				((i * 2) % 9) / 8,
				((i * 3) % 10) / 9, barh);
	local a = (window.h - barh) / 2;
	local sky = bar(0, .2, .5, window.h);

	local start = SDL.GetTicks();
	while true
	mainloop:
	{
		local t = SDL.GetTicks() - start;
		while true
		{
			local ev = SDL.PollEvent();
			if not ev
				break;
			switch ev.type
			  case SDL.KEYUP
				if ev.sym == SDL.KESCAPE
					break mainloop;
			  case SDL.MOUSEBUTTONUP, SDL.QUIT
				break mainloop;
		}
		draw(sky, buffer, 0);
		for local i = 0, sizeof bars - 1
			draw(bars[i], buffer,
					sin(t / 500 + (i / 10)) * a + a);
		render(renderer, buffer);
		SDL.RenderPresent(renderer);
		SDL.Delay(0);	// In case we don't have retrace sync...
	}
	return 0;
}
