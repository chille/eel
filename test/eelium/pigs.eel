////////////////////////////////////////////////////////
// pigs.eel - Bouncing Pigs
// Copyright 2005, 2010, 2014, 2016, 2017 David Olofson
////////////////////////////////////////////////////////

import math;
import SDL;
import SDL_image as IMG;
import eelium.text as text;

static rng = {
	.im	139968,
	.ia	3877,
	.ic	29573,
	.last	42
};

function rnd(max)
{
	rng.last = (rng.last * rng.ia + rng.ic) % rng.im;
	return (max * rng.last) / rng.im;
}

function roundstr(v, decimals)
{
	return (string)(floor(v * (10 ** decimals) + .5) / (10 ** decimals));
}

export function main<args>
{
	if specified args[1]
		local npigs = (integer)args[1];
	else
		npigs = 10;

	local window = Window ["Bouncing Pigs",
			WINDOWPOS_CENTERED, WINDOWPOS_CENTERED,
			640, 480];
	local renderer = Renderer [window];
	ShowCursor(false);

	// Load font
	local font = text.Open(renderer);

	// Load pig sprite image
	local pigframes = IMG.Load("pigframes2.png");
	local pig = [];
	for local i = 0, 12 - 1
	{
		local sr = Rect [(i % 3) * 64, (integer)(i / 3) * 48, 64, 48];
		pig[i] = Texture [renderer, pigframes, sr];
		pig[i].blendmode = BLENDMODE_BLEND;
	}
	pigframes = nil;

	// Initialize pigs
	local pigs = [];
	for local i = 0, npigs - 1
		pigs[i] = {
			.x	rnd(640 - 64),
			.y	rnd(300),
			.dx	rnd(400) - 200,
			.dy	0,
			.frame	0,
			.dframe	rnd(100) - 50
		};

	local lt, local fps_start, local fps_total_start = GetTicks();
	local fps_count, local fps_total_count = 0;
	local fps = 0;
	while true
	mainloop:
	{
		// Calculate delta time
		local nt = GetTicks();
		local dt = (nt - lt) * .001;
		lt = nt;

		// Clear window
		SetRenderDrawColor(renderer, 40, 60, 100);
		RenderClear(renderer);

		for local i = 0, npigs - 1
		{
			// Draw pig
			RenderCopy(renderer, pig[(integer)pigs[i].frame],
					nil, pigs[i].(x, y));

			// Move pig
			pigs[i].dy += 300 * dt;
			pigs[i].x += pigs[i].dx * dt;
			pigs[i].y += pigs[i].dy * dt;
			pigs[i].frame += pigs[i].dframe * dt;

			// anim wrap
			if pigs[i].frame < 0
				pigs[i].frame = 12 - (-pigs[i].frame % 12);
			else
				pigs[i].frame %= 12;

			// x bounce
			if pigs[i].x < 0
			{
				pigs[i].dx = -pigs[i].dx;
				pigs[i].x = -pigs[i].x;
			}
			else if pigs[i].x > (640 - 64)
			{
				pigs[i].dx = -pigs[i].dx;
				pigs[i].x -= pigs[i].x - (640 - 64);
			}

			// y bounce
			if pigs[i].y > (480 - 48)
			{
				pigs[i].dy = -pigs[i].dy;
				pigs[i].y -= pigs[i].y - (480 - 48);
			}
		}

		// fps counter
		if (fps_count > 50) or ((nt - fps_start) > 250)
		{
			fps = fps_count * 1000. / (nt - fps_start);
			fps_count = 0;
			fps_start = nt;
		}
		font:PutString(roundstr(fps, 1) + " fps", 1, 1);
		fps_count, fps_total_count += 1;

		// Make the update visible
		RenderPresent(renderer);
		Delay(0);

		// Check for exit request
		while true
		{
			local ev = PollEvent();
			if not ev
				break;
			switch ev.type
			  case KEYUP
				if ev.sym == KESCAPE
					break mainloop;
			  case MOUSEBUTTONUP, QUIT
				break mainloop;
		}
	}

	if fps_total_count > 100
	{
		fps = fps_total_count * 1000. / (GetTicks() - fps_total_start);
		print("Average fps: " + roundstr(fps, 1) + "\n");
	}

	return 0;
}
