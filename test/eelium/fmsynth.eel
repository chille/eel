//////////////////////////////////////////////////
// fmsynth.eel - Simple FM Synth
// Copyright 2006, 2010, 2014, 2017 David Olofson
//////////////////////////////////////////////////

eelversion 0.3.7;

import SDL, math, oscilloscope as oscilloscope;

constant FS = 44100;	// Output sample rate (Hz)
constant BUF = 512;	// Output buffer size (sample frames)
constant FIFO = 2048;	// PlayAudio() FIFO buffer size (sample frames)

constant F0 = 22;	// Frequency at left edge (Hz)
constant OCTAVES = 8;	// Number of octaves accross the window

export function main<args>
{
	local osc = oscilloscope.Open("FMSynth");

	OpenAudio(FS, BUF, FIFO);

	local ph = 0;			// Phase accumulator
	local a = 0;			// Amplitude
	local d = .1;			// Decay factor
	local f, local tf = 100.;	// Frequency
	local fm, local tfm = 0.;	// FM depth
	local lfm = 1;			// Low frequency FM divisor

	while true
	mainloop:
	{
		while true
		{
			local ev = PollEvent();
			if not ev
				break;
			switch ev.type
			  case KEYDOWN
			  {
				switch ev.sym
				  case K0, KKP_0
					lfm = 10;
				  case K1, KKP_1
					lfm = 1;
				  case K2, KKP_2
					lfm = 2;
				  case K3, KKP_3
					lfm = 3;
				  case K4, KKP_4
					lfm = 4;
				  case K5, KKP_5
					lfm = 5;
				  case K6, KKP_6
					lfm = 6;
				  case K7, KKP_7
					lfm = 7;
				  case K8, KKP_8
					lfm = 8;
				  case K9, KKP_9
					lfm = 9;
			  }
			  case KEYUP
				if ev.sym == KESCAPE
					break mainloop;
			  case MOUSEBUTTONDOWN
			  {
				// Retrig envelope
				ph = 0;
				a = 1;
				if ev.button == BUTTON_RIGHT
					d = 1;
				else
					d = .99995;
			  }
			  case MOUSEBUTTONUP
			  {
				// Decay envelope
				d = .999;
			  }
			  case MOUSEMOTION
			  {
				// Change pitch and FM depth
				tf = 2 ** (OCTAVES * ev.x / osc.w) * F0;
				tfm = ev.y - osc.h / osc.h * PI * 7;
			  }
			  case QUIT
				break mainloop;
		}
		while AudioSpace()
		{
			f += tf - f * .0005;
			fm += tfm - fm * .0005;
			local mod = fm * a * a + fm * sin(ph);
			if lfm > 1
				mod += sin(ph / lfm) * fm;
			local s = sin(ph + mod) * a;
			ph += 2. * PI * f / FS;
			a *= d;
			PlayAudio(s, s);
			osc:Feed(s);
		}
		Delay(10);
	}

	CloseAudio();
	return 0;
}
