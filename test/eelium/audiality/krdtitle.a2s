def title	"Kobo Redux Title Song"
def version	"1.2"
def description	"Adapted version of the original Kobo II WIP theme."
def author	"David Olofson"
def copyright	"Copyright 2011-2013, 2016-2017 David Olofson"
def license	"CC BY-NC-ND 3.0"
def a2sversion	"1.9"

Flute0(P V=1 Wave)
{
	struct { wtosc }
	!P0 tr; +P tr; w Wave; @p P; a 0; !er .05; !vib 0; !tvib .005; !pf .3
.rt	wg (V + a - .001) {
		tr (vib * 6 + rand .01)
		12 {	-tr vib; +p (P - p * pf); +a (V - a * er); d 5 }
		12 {	+tr vib; +p (P - p * pf); +a (V - a * er); d 5 }
		+vib (tvib - vib * .1)
	}
	a 0; d 5
	1(NV) {
		V NV
		if NV {
			vib .005; tvib .005; er .05; wake rt
		} else {
			tvib .02; er .02
		}
	}
	2(NP NPF=.3) { P (P0 + NP); pf NPF }
}

Flute(P V=1)
{
	struct { inline; panmix }
	def A1 1; def A2 .3
	def P1 1.001; def P2 -.001
	1:Flute0 (P + P1) (V * A1) triangle
	2:Flute0 (P + P2) (V * A2) pulse10
	1(NV) { 1<1 (NV * A1); 2<1 (NV * A2) }
	2(NP NPF=.3) { 1<2 (NP + P1) NPF; 2<2 (NP + P2) NPF }
}

Feep(P V=1 C=2)
{
	struct { wtosc; filter12; panmix }
	lp .5; bp .5; hp .1; q .05
	cutoff (P - 1); !tp (P + C)
	!pp (rand 3 - 1.5)
	!P0 tr; +P tr; w pulse1; @p P; a 0; !er .05; !vib 0; !tvib .005
.rt	while ((V + a) > .001) {
		tr (vib * 6 + rand .01)
		12 {
			-tr vib; +p (P - p * .1); +a (V - a * er)
			+cutoff (tp - cutoff * .05)
			+pan (pp - pan * .05)
			d 3
		}
		12 {
			+tr vib; +p (P - p * .1); +a (V - a * er)
			+cutoff (tp - cutoff * .05)
			+pan (pp - pan * .05)
			d 3
		}
		+vib (tvib - vib * .3)
	}
	a 0; d 5
	1(NV NC=2) {
		V NV
		if NV {
			vib .005; tvib .005; er .03; wake rt
		} else {
			tvib .02; er .01; tp P
		}
		tp (P + NC)
		pp (rand 2 - 1)
	}
	2(NP NC=2) {
		P (P0 + NP)
		tp (P + NC)
		pp (rand 2 - 1)
	}
}

SpaceFeep(P V=1)
{
	struct {
		inline 0 *
		fbdelay * *
		panmix * >
	}
	fbdelay (tick * 6 + 10); fbgain .5
	ldelay (tick * 5 + 13); lgain .5
	rdelay (tick * 4 + 17); rgain .5

	def I Feep
	+tr P
	*V .25
				td 8
	1:I 7n V 1;		td 2
	1<2 8n 3;		td 2
	1<2 7n 2;		td 2
	1<2 5n 1;		td 2
	1<2 7n 2;		td 8
	1<2 3n 1;		td 8
	1<2 0n 3;		td 12
	1<1 (V * .8) 2.5;	td 2
	1<1 (V * .6) 2;		td 2
	1<1 (V * .4) 1.5;	td 2
	1<1 (V * .3) 1;		td 2
	1<1 0 -1;		td 12

				td 8
	1:I 7n V 1;		td 2
	1<2 8n 3;		td 2
	1<2 7n 2;		td 2
	1<2 5n 1;		td 2
	1<2 7n 2;		td 8
	1<2 3n 1;		td 8
	1<2 -5n 3;		td 12
	1<1 (V * .8) 2.5;	td 2
	1<1 (V * .6) 2;		td 2
	1<1 (V * .4) 1.5;	td 2
	1<1 (V * .3) 1;		td 2
	1<1 0 -1;		td 12

				td 40
}

Str0(P V Attack Decay Detune)
{
	struct { wtosc; panmix }
	pan (Detune * 100)
	w saw; a 0; !Ta (V * .1); phase (rand 1)
	+P Detune
	@p P; !er (Attack * .1)
.rt	wg (V + a - .001) {
		+p (P - p * .4 + rand .02 - .01)
		+a (Ta - a * er); Ta (V * rand .2)
		d (rand 5 + 2.5)
	}
	a 0; d 5
	1(NV) {
		ifg (NV - V) {
			V NV; er (Attack * .1); wake rt
		} else {
			V NV; er (Decay * .1)
		}
	}
	2(NP) { P (NP + Detune) }
}
Strings(P V=1 Attack=.3 Decay=.2)
{
	!Voices (7 - P quant 1)
	ifl (Voices - 2) {
		Voices 2
	}
	def Spread .02
	!detune (0 - (Spread / 2))
	Voices {
		0:Str0 P V Attack Decay detune
		+detune (Spread / Voices)
	}
	1(NV) { *<1 NV }
	2(NP) { *<2 NP }
}

OctStrings(P V=1)
{
	1:Strings (P + 1) V .5 .2
	2:Strings (P - 1) V .2 .4
	1(NV) { *<1 NV }
	2(NP) { 1<2 (NP + 1); 2<2 (NP - 1) }
}

nb(P V=1 Pan)
{
	struct { wtosc; panmix }
	pan Pan; set pan
	w noise; @p (P + 6); a (V * .8); set a
	50 {	*a .99; *p .96; d 2 }
	40 {	*a .92; -p .01; d 50 }
}
NBurst(P V=1)
{
	nb P (V * .5) -1.25
	nb P (V * .5) 1.25
}

NBurst2(P V=1)
{
	struct { wtosc }
	w noise; @p (P + 3.5); a V; set a; *a .5; d 10
	-p 2
	60 {	*a .9; d 50 }
}

sdn(V)
{
	struct { wtosc }
	w noise; @p 5.5; a V; set a; d 2
	@p 5; *a .4; d 20
	*a .2; d 100
	100 {
		!D (rand 15 + 5)
		@p 4.5; *a .95; d D
		@p 6; d D
	}
}
SDrum(P V=1)
{
	struct { wtosc }
	sdn V
	w square; @p (P + 2); a V; set a
	10 {	-p .2; d 1 }
	d 5
	-p .2; d 5
	5 {
		!D (rand 2 + 3)
		w saw; -p .51; d D
		w square; +p .5; *a .7; d D
	}
	*a .5; !p0 (p - .8)
	1000 {	p (rand 1.5 + p0); *a .99; d 1 }
}

HHClosed(P V=1)
{
	struct { wtosc }
	w square; a (V * .2); set a; @p 6
	3 {	d 1; -p .5 }
	200 {	p (rand 1.5 + 4.5); *a .95; d .5 }
}

HHOpen(P V=1)
{
	struct { wtosc }
	w square; a (V * .2); set a; @p 6
	3 {	d 1; -p .5 }
	600 {	p (rand 1.5 + 4.5); *a .993; d .5 }
}

HH0()
{
	!aa 1
	32 {	HHClosed 0 aa; *aa .8;	td 1 }
}

HH1()
{
	def c HHClosed; def o HHOpen
	8 {
		c;		td 1
		c 0 .5;		td 1
		c 0 .25;	td 1
		c 0 .5;		td 1
		o 0 .5;		td 12
	}
}

HH2()
{
	def c HHClosed; def o HHOpen
	8 {
		c;	td 1
		c;	td 1
		c;	td 1
		c;	td 1

		o;	td 1
		c;	td .5
		c;	td .5
		c;	td 1
		o;	td 1

		c;	td 1
		c;	td 1
		c;	td 1
		c;	td .5
		c;	td .5

		o;	td 1
		c;	td 1
		c;	td 1
		c;	td .5
		c;	td .5
	}
}

bdnoise(P V)
{
	struct { wtosc }
	w noise; @p (P + 4); a (V * .2); set a
	20 {	*a .95; -p .1; d 3 }
	a 0; d 1000
}
BDrum(P V=1)
{
	struct { wtosc }
	bdnoise P V
	w sine; @p (P + 4); a V; set a
	5 {	-p .9; d 1 }
	d 10
	5 {	-p .2; d 2 }
	d 20
	20 {	-p .1; d 10 }
	d 30
	a 0; d 100
	d 1000
}

tn(P V)
{
	struct { wtosc }
	w noise; @p (P + 6); a (V * .5); set a; d 10
	-p 2
	100 {	-p .07; *a .8; d 10 }
}
Tom(P V=1)
{
	struct { wtosc }
	tn P V
	w saw; @p (P + 3); a V; set a
	10 {	-p .35; d 1 }
	w triangle
	7 {
		-p .15; *a .9; d 10
		+p 3n; d 10
		-p 3n
	}
	20 {
		-p .01; *a .8; d 10
		+p 3n; d 10
		-p 3n
	}
}

SoftArp(P V=1 Maj=0)
{
	struct { wtosc; panmix }
	sa0(PP VV)
	{
		pan (rand 1 - .5); set pan
		a VV; @p PP;	td .01
		*a .25;		td .49
	}
	w triangle; a V; +tr P; !aa a
	7 {
		sa0 12n aa
		sa0 0 aa
		sa0 (3n + Maj) aa
		sa0 7n aa
		*aa .75
		sa0 (15n + Maj) aa
		sa0 (3n + Maj) aa
		sa0 7n aa
		sa0 12n aa
		*aa .75
		sa0 19n aa
		sa0 7n aa
		sa0 12n aa
		sa0 (15n + Maj) aa
		+tr 1; *aa .75
	}
}

SoftArp2(P V=1 Maj=0)
{
	struct { wtosc; panmix }
	sa0(PP VV)
	{
		pan (rand 1 - .5); set pan
		a VV; @p PP;	td .01
		*a .25;		td .49
	}
	w triangle; a V; +tr P; !aa a
	40 {
		sa0 12n aa
		sa0 0 aa
		sa0 (3n + Maj) aa
		sa0 7n aa
		*aa .75
	}
}

Explo0(P V=1 Wave Attack)
{
	struct { wtosc; panmix }
	pan (rand 1 - .5); set pan
	+P tr; w Wave; !x 1.5; a V; -P 3; tr Attack; !D 1
	200 {	*tr .98; p (P + rand x); +x .01; d D; +D .005 }
	800 {	*tr .98; p (P + rand x); -x .0025; *a .999; d D; +D .005 }
	tr P
	800 {	rand p x; *a .995; d 2.5 }
}
Explosion(P V=1)
{
	+tr P
	Explo0 0 V sine 2
	Explo0 -1 V sine 4
	Explo0 .5 (V * .5) triangle 5
	Explo0 1.5 (V * .25) sine 3
}

PulseOct(P V=1)
{
	struct { wtosc }
	w saw; @p P
	wg V {
		+p 1; set p; a V; set a; a 0; td .5; *V .9
		-p 1; set p; a V; set a; a 0; td .5; *V .9
		+p 3; set p; a V; set a; a 0; td .5; *V .9
		-p 1; set p; a V; set a; a 0; td .5; *V .9
		-p 2; set p; -V .001
	}
}

subs(P V=1 W)
{
	struct { wtosc }
	w W
.rt	@p (P + 2); a V; d 1
	10 { -p .2; d 1 }
	wg (V + a - .001) {
		+p (P - p * .1); +a ((V * .7) - a * .2); d 5
	}
	1(NV) { V NV; wake rt }
	2(NP) { P NP }
}
Sub(P V=1)
{
	struct { inline; filter12 }
	lp .5; bp .3; hp .3; cutoff P; q .03
	1:subs (P - 1) V saw
	2:subs (P + 1) (V * .5) saw
	1(NV) { 1<1 NV; 2<1 (NV * .5) }
	2(NP) { 1<2 (NP - 1); 2<2 (NP + 1); cutoff P }
}

SubPulse(P V=1 Dur=2)
{
	struct { wtosc; wtosc o2; filter12 }
	!np P; !oct 0
	w saw; o2.w triangle
	lp 1; bp 1; hp 0
.rt	while V {
		q .02; set q; cutoff (P + 5); set cutoff
		@p (np + (oct % 3 % 2))
		@o2.p (p - 1)
		+oct 1; %oct 8
		phase 0; o2.phase 0
		a (V * .2); o2.a V; td .125
		td .125
		q .005; cutoff (P + .8); *a .25; *o2.a .5; td (Dur * .25 - .25)
		cutoff (P + .5); a 0; o2.a 0; td (Dur * .75)
	}
	1(NV) { V NV; wake rt }
	2(NP) { np NP }
}

ResoBass(P V=1 Reso)
{
	struct { wtosc }
	@p (P + 2); w square; a (V * .2); set a
	a 0; d 5
	+Reso (P + 1.5); w sine
	P p2d (P + tr)
	10 {
		phase 0; @p Reso; a V; set a
		a 0; d P
		-Reso 1n
		*V .8
	}
	!i (500 / P); !mv (1 - (1 / (.1 * i)))
	i {
		phase 0; @p Reso; a V; set a; a 0; d P
		-Reso .1n; *V mv
	}
}

rl(p1 v v1 r r1 cnt=16)
{
	-p1 24n
	!dv ((v1 - v) / cnt)
	!dr ((r1 - r) / cnt)
	cnt {	ResoBass p1 v r; +v dv; +r dr; td 2 }
}
rlT(p1 v v1 r r1 cnt=16)
{
	-p1 24n
	/cnt 2
	*r 2
	!dv ((v1 - v) / cnt / 4)
	!dr ((r1 - r) / cnt / 4)
	cnt {
		ResoBass p1 v r; +v dv; +r dr; td 1
		ResoBass (p1 + 7n) v r; +v dv; +r dr; td 1
		ResoBass (p1 + 12n) v r; +v dv; +r dr; td 1
		ResoBass (p1 + 19n) v r; +v dv; +r dr; td 1
	}
}
rlI(p1 v v1 r r1 cnt=16)
{
	-p1 24n
	/cnt 4
	!dv ((v1 - v) / cnt / 4)
	!dr ((r1 - r) / cnt / 4)
	cnt {
		ResoBass (p1 - 12n) v r; +v dv; +r dr; td 2
		ResoBass p1 v r; +v dv; +r dr; td 2
		ResoBass (p1 - 12n) v r; +v dv; +r dr; td 2
		ResoBass (p1 + 1n) v r; +v dv; +r dr; td 2
	}
}
rl2(p1 v v1 r r1 cnt=16)
{
	*cnt 2;
	!dv ((v1 - v) / cnt)
	!dr ((r1 - r) / cnt)
	-r .5; -p1 24n; /cnt 8
	cnt {
		4 {	ResoBass p1 v r; +v dv; +r dr; +r .3; td 1 }
		4 {	ResoBass p1 v r; +v dv; +r dr; -r .3; td 1 }
	}
}
rl3(p1 v v1 r r1 cnt=16)
{
	*cnt 2;
	-p1 24n
	!dv ((v1 - v) / cnt)
	!dr ((r1 - r) / cnt)
	cnt {	ResoBass p1 v r; +v dv; +r dr; td 1 }
}
ResoIn(P V=1)
{
	struct { inline; panmix }
	rl P	.1 (V * .5)	0	.16;	td 32
	rl P	(V * .5) V	.16	0;	td 32
}
Reso1(P V=1 P2=0 Ins=rl)
{
	struct { inline; panmix }
	+P2 P
	:Ins P	V V	0	.5	8;	td 16
	:Ins P2	V V	.5	.9	8;	td 16
	:Ins P	V V	.9	1.4	16;	td 32
}
Reso2(P V=1 P2=0 Ins=rl)
{
	struct { inline; panmix }
	+P2 P
	:Ins P	V V	1.4	1	8;	td 16
	:Ins P2	V V	1	.8	8;	td 16
	:Ins P	V V	.8	0	16;	td 32
}

ResoOut(P V=1)
{
	struct { inline; panmix }
	rl P	V (V * .5)	0	.16	8;	td 16
	rl P	(V * .5) 0	.16	0	8;	td 16
}

EvilSyncBass(P V=1 Drive)
{
	struct { wtosc; panmix }
	pan .3
	+P tr; tr 0; @p P
	*V .6
	!per (p2d P * .5)
	a V; set a
	@p 5; w noise; phase 0; d 2
	@p (P + 2); w square; d per
	w saw; @p (P + .5 + Drive)
	!ma .99; !dp .01
	wg (a - .01) {
		+p dp; set p; w saw; phase 0; d per
		*a ma; w square; d per
	}
	a 0; set a
	1() { *a .5; *ma .85; +p 1; set p; /per 4; *<1 }
}

c0(P V W rmax D)
{
	struct { wtosc; panmix }
	pan (rand 1 - .5)
	w W; a V; set a; +tr P; @p 0
	!rmh (rmax * .25)
	200 {	p (rand rmax - rmh); *rmax .997; *rmh .997; *a .995; d D }
	40 {
		100 {	p (rand rmax - rmh); d D }
		*a .85; *rmax .99; *rmh .99
	}
}
Cymbal(P V=1)
{
	tr P
	c0 5.3 V saw 1 .5
	c0 4 (V * .8) saw 2 .7
	c0 3.5 (V * .6) square 2 .8
	c0 2.7 (V * .3) sine 1.5 1
	c0 2 V sine 2.5 1.2
}
LowCymbal(P V=1)
{
	tr P
	c0 5 V saw 1 .8
	c0 4 (V * .8) saw 2 1
	c0 3 (V * .6) square 2 1.2
	c0 2.2 (V * .3) sine 1.5 1.35
	c0 1.5 V sine 2.5 1.5
}

Drone(P V=1)
{
	def i EvilSyncBass; +tr (P - 36n)
	1:i 0 V 2.5;	td .5;	1<1
			td 1.5
	1:i 0 V 1;	td 30;	1<1
	1:i 0 V 2;	td .5;	1<1
			td 1.5
	1:i 0 V 0;	td 30;	1<1
}

Heavy(P V=1 P2=0)
{
	def i EvilSyncBass; +tr (P - 36n)
	1:i 0 V 1;	td .5;	1<1
			td .5
	1:i 7n V 1.5;	td .5;	1<1
			td .5
	1:i 1 V 2;	td 2;	1<1
	1:i 0 V 1.5;	td .5;	1<1
			td .5
	1:i 7n V 2;	td .5;	1<1
			td .5
	1:i 1 V 2.5;	td 2;	1<1
			td 8
	+tr P2
	1:i 0 V 1;	td .5;	1<1
			td 1.5
	1:i 0 V 1;	td .5;	1<1
			td 5.5
	1:i 1 V 2;	td 2.5;	1<1
			td .5
	1:i 0 V 0;	td 1;	1<1
			td 4
}

PreTheme(Tr)
{
	def i Flute; +tr (Tr + 1)
	1:i -12n .4;	td 1
	1<2 -10n;	td 1
	1<2 -7n;	td 1
	1<2 -2n;	td 1;	1<1
}

MeloTheme(Tr)
{
	struct {
		inline 0 *
		fbdelay * *
		panmix * >
	}
	fbdelay (tick * 5 + 10); fbgain .3
	ldelay (tick * 3 + 13); lgain .3
	rdelay (tick * 2 + 17); rgain .3

	def i Flute; +tr (Tr + 1)
	1:i 0n .5;	td 8
	1<2 7n;		td 6
	1<2 0n;		td .25
	1<2 5n;		td 1.75
	1<2 10n .15;	td 8
	1<1;		td 3
	1:i 3n .5;	td 1
	1<2 5n;		td 2
	1<2 10n;	td 2
	1<2 6n .6;	td .5
	1<2 7n;		td 7.5
	1<1 .3;		td 6
	1<2 6n .003;	td 4
	1<1;		td 10

	1:i -5n .5;	td 2
	1<2 -2n;	td 2
	1<2 0n;		td 8
	1<2 7n .15;	td 5
	1<2 7n2 .2;	td 1
	1<2 10n;	td 2
	1<2 1n .7;	td .5
	1<2 3n;		td 5
	1<2 4n .8;	td .5
	1<2 2n .8;	td 6
	1<2 0n;		td .25
	1<2 3n .1;	td 1.75
	1<2 2n;		td 2
	1<2 0n;		td 8
	1<1 .3;		td 7.5
	1<2 3n .2;	td .5
	1<2 0n .5;	td 3
	1<2 -1n .003;	td 6
	1<1;		td 10

	td 40
}

PT2Melo()
{
	struct {
		inline 0 *
		fbdelay * *
		panmix * >
	}
	fbdelay (tick * 5 + 10); fbgain .4
	ldelay (tick * 3 + 13); lgain .5
	rdelay (tick * 2 + 17); rgain .5

	def i Flute
	-tr 1
	1:i 7n .4;		td 4		// 0
	1<2 12n; 1<1 .5;	td 3.75
	1<2 11n;		td .25
	1<2 15n .2;		td 4
	1<2 12n .8;		td 4
	1<2 13n .2;		td 1		// 16
	1<2 14n .1;		td 5
	1<1 .4;	1<2 10n;	td 6
	1<2 12n;		td 2
	1<2 5n .03;		td 2
	1<2 5n;			td .5		// 32
	1<2 7n .03;		td 11
	1<2 5n .5;		td .5
	1<2 7n .5; 1<1 .3;	td 4
	1<1;			td 12		// 48

	1:i 0n .4;		td 2		// -4
	1<2 3n;			td 2

	1<2 7n;			td 6		//0
	1<2 12n; 1<1 .5;	td 1.75
	1<2 11n;		td .25

	1<2 15n .1;		td 4
	1<2 12n .8;		td 4
	1<2 13n .2;		td 1		// 16
	1<2 14n .1;		td 5
	1<1 .4;	1<2 17n;	td 6
	1<2 19n;		td 2
	1<2 14n .03;		td 2
	1<2 14n;		td .5		// 32
	1<2 15n .03;		td 10.75
	1<2 14n .8;		td .75
	1<2 12n .5; 1<1 .3;	td 4
	1<1;			td 10

	td 40
}


Fx1(Tr)
{
	td 8
	+tr Tr; PulseOct -1 .5
	td 8
}

Fx2(Tr)
{
	td 8
	+tr Tr; PulseOct 1 .3
	td 8
}

Perc2()
{
	struct { inline; panmix }
	tr 0
	BDrum 0 .5;	HH1;	td 8
	NBurst 0 .5;		td 22
	BDrum -4n .25;		td 2
	BDrum 0 .5;		td 8
	NBurst2 0 .5;		td 19
	Tom 7n .02;		td .5
	Tom 7n .03;		td .5
	Tom 7n .05;		td .5
	Tom 7n .1;		td .5
	Tom 7n .25;		td .5
	Tom 7n .1;		td .5
	Tom 7n .05;		td .5
	Tom 7n .03;		td .5
	Tom 7n .02;		td .5
	Tom 7n .01;		td .5

	BDrum 0 .5;		td 8
	NBurst 0 .5;		td 22
	BDrum -4n .25;		td 2
	BDrum 0 .5;		td 8
	NBurst2 0 .5;		td 19
	Tom 7n .02;		td .5
	Tom 7n .03;		td .5
	Tom 7n .05;		td .5
	Tom 7n .1;		td .5
	Tom 7n .25;		td 1
	Tom 3n .5;		td 1
	Tom;			td 1
}

p30()
{
	BDrum;		td 4
	BDrum;		td 4
	SDrum;		td 7
	BDrum -4n .5;	td 1
	BDrum;		td 6
}
p3a()
{
	p30;		td 22
	Tom 7n .02;	td .5
	Tom 7n .03;	td .5
	Tom 7n .05;	td .5
	Tom 7n .1;	td .5
	SDrum; NBurst2;	td 8
}
p3b()
{
	p30;		td 22
	SDrum 0 .05;	td .5
	SDrum 0 .1;	td .5
	SDrum 0 .2;	td .5
	SDrum 0 .4;	td .5
	SDrum; NBurst2
}
Perc3()
{
	struct { inline; panmix }
	tr 0
	HH2
	p3a;		td 32
	p3b;		td 24
			td 7
	BDrum -4n .5;	td 1
	p3a;		td 32
	p3b;		td 24
			td 3
	Tom 7n .02;	td .5
	Tom 7n .03;	td .5
	Tom 7n .05;	td .5
	Tom 7n .1;	td .5
	Tom 7n .25;	td 1
	Tom 3n .5;	td 1
	Tom;		td 1
}

Drop(P V=1 short)
{
	struct { wtosc; panmix }
	-P 3; !D 3
	w sine; @p (P + 3); a (V * .9)
	100 {
		+p (P - p * .023); d D; +D .2
	}
	if short {
		50 {
			-p .01; *a .95; d 50
		}
	} else {
		50 {
			-p .01; d 70
		}
		50 {
			+p .01; *a .95; d 100
		}
	}
	a 0; d 1000
}

BassI(Tr)
{
	struct { inline; panmix }
	+tr Tr
	Drop;	Reso1 0 1 0 rlI;	Drone 0 .4;	td 64
	Drop;	Reso2 0 1 0 rlI;	Drone 0 .4;	td 64
}

SubLoop(Tr)
{
	struct { inline; panmix }
	+tr (Tr - 2)
	2 {
		1:Sub -5n;	td 3;	1<1
		1:Sub 3n;	td 3;	1<1
		1:Sub 0;	td 3;	1<1
				td 3
		1:Sub 0;	td 1;	1<1
				td 3

		1:Sub 0;	td 4;	1<1
		1:Sub -1;	td 2;	1<1
		1:Sub 0;	td 1;	1<1
				td 5
		1:Sub 0;	td 2;	1<1
		1:Sub 3n;	td 1;	1<1
				td 1

		1:Sub -5n;	td 3;	1<1
		1:Sub 3n;	td 3;	1<1
		1:Sub 0;	td 3;	1<1
				td 3
		1:Sub 0;	td 1;	1<1
				td 3

		1:Sub 0;	td 4;	1<1
				td 2
		1:Sub 0;	td 1;	1<1
				td 5
		1:Sub -1;	td 3;	1<1
				td 1
	}
}

BassSP(Tr P2)
{
	struct { inline; panmix }
	+tr (Tr - 3)
	1:SubPulse 0 1 1;	2:SubPulse 1 .5 1;	td 16
	1<2 P2;			2<2 (P2 + 1);		td 16
	1<2 0;			2<2 1;			td 32
	1<1;			2<1
}

BassT(Tr)
{
	struct { inline; panmix }
	+tr Tr
	BassSP 0 -2n;	Reso1 0 .8 -2n rlT;	Heavy 0 .7 -2n;	td 32
						Heavy 0 .7;	td 32
	BassSP 0 -2n;	Reso2 0 .8 -2n rlT;	Heavy 0 .7 -2n;	td 32
						Heavy 0 .7;	td 32
}

Bass3(Tr)
{
	struct { inline; panmix }
	+tr Tr
	Reso1 -1 .5 0 rl; Reso1 2 .5 7n rl2
	1:Strings -2 .6; 2:Strings 7n .3;		td 64
	Reso2 -1 .5 0 rl; Reso2 2 .5 7n rl2;		td 64
	1<1; 2<1
}

St(Tr)
{
	def i Strings; def v .3; +tr (Tr + 1)
	1:i 0 v;	2:i 3n v;	3:i 7n v;	td 16
	1<2 -2n;			3<2 5n;		td 16
	1<2 0;		2<2 7n;				td 16
			2<2 2n;		3<2 -5n;	td 16
	*<1
}

St2(Tr)
{
	def i OctStrings; def v .6; +tr (Tr + 1)
	1:i 0 v;	td 6;	1<1
	1:i 7n v;	td 6;	1<1
	1:i 3n v;	td 4;	1<1
	1:i 5n v;	td 6;	1<1
	1:i 10n v;	td 6;	1<1
	1:i 5n v;	td 4;	1<1
	1:i 7n v;	td 16;	1<1
	1:i 3n v;	td 6;	1<1
	1:i 2n v;	td 6;	1<1
	1:i 0 v;	td 4;	1<1

	1:i 10n v;	td 6;	1<1
	1:i 8n v;	td 6;	1<1
	1:i 7n v;	td 4;	1<1
	1:i 5n v;	td 6;	1<1
	1:i 7n v;	td 6;	1<1
	1:i 8n v;	td 4;	1<1
	1:i 7n v;	td 16;	1<1
	1:i 7n (v * .7);td 8;	1<1
			td 8
}

ArpM(Tr TrS)
{
	+tr Tr
	SoftArp 0 .6;		St TrS;	td 16
	SoftArp -2n .5 -1n;		td 16
	SoftArp -5n .7 2n;		td 32
}

Perc1Fill()
{
	struct { inline; panmix }
	tr 0
	Tom 7n .02;	td .5
	Tom 7n .03;	td .5
	Tom 7n .05;	td .5
	Tom 7n .1;	td .5
	Tom 7n .25;	td 1
	Tom 3n .5;	td 1
	Tom;		td 1
}

BassR()
{
	struct { inline 0 *; panmix * > }
	def i Strings; def v .25; !n 0
	vol 0; set vol; vol 1
	1:i 4n v;	2:i 7n v;	3:i 11n v;	4:i -32n v;	td 14
	vol 0;								td 1
	kill
}

BassF()
{
	struct { inline 0 *; panmix * > }
	def i Strings; def v .4; !n 0
	vol 0; set vol; vol 1
	-tr 1n
	!p1 4n; !p2 7n; !p3 11n; !p4 -32n
	1:i p1 v; 2:i p2 v; 3:i p3 v; 4:i p4 v
	16 {
		1<2 p1; 2<2 p2; 3<2 p3; 4<2 p4
		-p1 1n; -p2 1n; -p3 1n; -p4 1n
		td .5
	}
	*<1
}

IntroDrone(P=0)
{
	struct { inline 0 *; panmix * > }
	tr P
	vol .05; set vol
	Strings -3 1; OctStrings -3 .5; ResoIn 1; EvilSyncBass -3 .3 2
	vol .6;							td 32
	vol 0;							td 2
	kill
}

Intro()
{
	IntroDrone
	Explosion -1 .7;					td 16
	Cymbal -3 .2;						td 16
	1<1; 2<1
}

LoopOutro(P)
{
	IntroDrone P
	ResoOut; Explosion 0 .5; LowCymbal -1 .2; SoftArp2 -1 1 2n; td (32 - 5)
}

Outro()
{
	ResoOut; Explosion 0 .5; LowCymbal -1 .2; SoftArp2 -1 1 2n; td 32
}

Theme()
{
	Perc3;	BassT; LowCymbal 0 .5;	ArpM;	MeloTheme;	td 64
			Cymbal 0 .2;	ArpM;			td 64
}

PostTheme()
{
	SubLoop; Perc2;	Bass3;	LowCymbal -1 .3; ArpM 0 -1;	St2;	td 32
									td 32
			Cymbal 0 .1;		ArpM 0 -1;		td 32
									td 32
}

PostTheme2()
{
	PT2Melo
	SubLoop; Perc2;	Bass3;	LowCymbal -1 .3; ArpM 0 -1;		td 32
									td 32
			Cymbal 0 .1;		ArpM 0 -1;		td 32
									td 32
}

Inter()
{
	SpaceFeep
	Perc2;	BassI;	Explosion 0 .3;	LowCymbal -1 .3;	Fx1;	td 32
					SoftArp -2;			td 32
					Cymbal 0 .1;		Fx2;	td 32
					SoftArp -1 .8 -1n;		td 32
}

Rise()
{
	BassR;		Drop 0 .5 1;	LowCymbal 0 .25;		td 12
	PreTheme 4n;							td 4
}

Fall()
{
	BassF;		Drop 0 .5 1;	LowCymbal 0 .25;		td 8
}

Inter2()
{
	SpaceFeep
	SubLoop; Perc2;	Bass3;	Explosion 0 .3;	LowCymbal -1 .3;	td 32
					SoftArp -2;			td 32
					Cymbal 0 .1;			td 32
					SoftArp -1 .8 -1n;		td 28
	PreTheme;							td 4
}

Main(L)
{
	tempo 108 4
	!Tr0 tr; !Tr 2n

	Intro;					td (32 - 5)

	while L {
		tr (Tr0 + Tr - 2n)

		Perc1Fill;			td 1
		PreTheme;			td 4

		Theme;				td 128
		PostTheme;			td 128
		Inter;				td 128

		Rise;				td 16
		+tr 4n
		Theme;				td 128
		PostTheme2;			td 128
		-tr 4n
		Fall;				td 8

		Inter2;				td 128
		Theme;				td 128
		PostTheme;			td 128

		if L {
			// Determine key of next play!
			+Tr (rand 2n quant 1n + 1n); %Tr 4n
			LoopOutro (Tr0 + Tr - 2n);	td (32 - 5)
		} else {
			Outro;			td 32
						td 16
		}
	}
}

export Song(P V=1 L=1)
{
	struct {
		inline 0 *
		fbdelay * *
		panmix * >
	}
	fbdelay 160; fbgain .1
	ldelay 300; lgain .1
	rdelay 350; rgain .1

	// Transposition + volume - no fade-in
	+tr P; vol (V * .4); set vol

	1:Main L
	wait 1
	end
.stop
	// Fade out
	10 {
		*vol .7
		d 100
	}
	vol 0; d 100
	kill

	// "Stop" message handler
	1() {
		force stop
	}
}
